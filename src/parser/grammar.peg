start := start=line

line := '[\s]*' label=label? '[\s]*' currentLine=directive wso comment=comment? nend nextLine=line |
        '[\s]*' label=label? '[\s]*' currentLine=instruction wso comment=comment? nend nextLine=line |
        '[\s]*' label=label? '[\s]*' currentLine=variableLine nend nextLine=line |
        '[\s]*' label=label? '[\s]*' currentLine=commentLine nend nextLine=line |
        '[\s]*' $

directive := directive=ascii | directive=space | directive='.[aA][rR][mM]' | directive='.[tT][eE][xX][tT]' |
        directive='.[dD][aA][tT][aA]' | directive='.[aA][lL][iI][gG][nN]' | directive='.[gG][lL][oO][bB][aA][lL]' ws '_[sS][tT][aA][rR][tT]'

ascii := '.[aA][sS][cC][iI][iI]' ws '"' data='[ -!#-~]*' '"'
space := '.[sS][pP][aA][cC][eE]' ws size='[0-9]+'

instruction := instruction=art | instruction=log | instruction=copyJump | instruction=loadStore | instruction=loadStoreMultiple | instruction=softwareInterrupt

variableLine := variable='[_A-Za-z][_A-Za-z0-9]*' wso '=' wso '.' wso '-' wso label='[_A-Za-z][_A-Za-z0-9]*'

commentLine := commentLine=comment

label := label='[_A-Za-z][_A-Za-z0-9]*' ':'
comment := comment='//[ \t\S]*' | comment='\/\*[\s -.0-~öäüß]*\*\/'

//------------------------------------------------------------------------------------------------

art := inst=artInst cond=condition ws operands=artOp | inst='[mM][uU][lL]' cond=condition ws operands=artMulOp | inst='[mM][lL][aA]' cond=condition ws operands=artMlaOp

artInst := '[aA][dD][dD]' | '[aA][dD][cC]' | '[sS][uU][bB]' | '[sS][bB][cC]' | '[rR][sS][bB]' | '[rR][sS][cC]'

artOp := artOp3 | artOp2
artOp2 := op1=regOp wso ',' wso op2=op
artOp3 := op1=regOp wso ',' wso op2=regOp wso ',' wso op3=op

artMulOp := op1=regOp wso ',' wso op2=regOp wso ',' wso op3=regOp
artMlaOp := op1=regOp wso ',' wso op2=regOp wso ',' wso op3=regOp wso ',' wso op4=regOp

//------------------------------------------------------------------------------------------------

log := inst=logInst cond=condition ws operands=logOp | inst=logCmpInst cond=condition ws operands=logOp2

logInst := '[aA][nN][dD]' | '[oO][rR][rR]' | '[eE][oO][rR]' | '[bB][iI][cC]'
logCmpInst := '[cC][mM][pP]' | '[cC][mM][nN]' | '[tT][sS][tT]' | '[tT][eE][qQ]'

logOp := logOp3 | logOp2
logOp2 := op1=regOp wso ',' wso op2=op
logOp3 := op1=regOp wso ',' wso op2=regOp wso ',' wso op3=op

//------------------------------------------------------------------------------------------------

copyJump := inst=copyInst cond=condition ws operands=copyOp | inst=jumpInst1 cond=condition ws operands=jumpOp | inst=jumpInst2 cond=condition ws operands=jumpOp

copyInst := '[mM][oO][vV]' | '[mM][vV][nN]'
jumpInst1 := '[bB]'
jumpInst2 := '[bB][lL]'

copyOp := op1=regOp wso ',' wso op2=op
jumpOp := op1=branchOp

//------------------------------------------------------------------------------------------------

loadStore := inst=loadStoreInst format=format cond=condition ws operands=loadStoreOp | inst=loadStoreInst cond=condition ws operands=loadImmediateBranchOp |
        inst=loadStoreInst cond=condition ws operands=loadImmediateOp

loadStoreInst := '[lL][dD][rR]' | '[sS][tT][rR]' | '[sS][wW][pP]'
format := '[bB]' | '[hH]' | '[sS][bB]' | '[sS][hH]' | ''

loadStoreOp := op1=regOp wso ',' wso op2=addressingMode
loadImmediateOp := op1=regOp wso ',' wso op2=immOp
loadImmediateBranchOp := op1=regOp wso ',' wso '=' op2=branchOp offset='[+-][0-9]+'?

//------------------------------------------------------------------------------------------------

loadStoreMultiple := inst=loadStoreMultipleInst addressingMode=loadStoreMultipleAddrMode cond=condition ws operands=loadStoreMultipleOp

loadStoreMultipleInst := '[lL][dD][mM]' | '[sS][tT][mM]'
loadStoreMultipleAddrMode := '[fF][dD]' | '[fF][aA]' | '[eE][dD]' | '[eE][aA]' | '[iI][aA]' | '[iI][bB]' | '[dD][aA]' | '[dD][bB]' | ''

loadStoreMultipleOp := op1=regOp increment='!'? wso ',' wso '{' wso op2=regOpList wso '}'


//------------------------------------------------------------------------------------------------

softwareInterrupt := inst='[sS][wW][iI]' cond=condition ws operands='#0'

//------------------------------------------------------------------------------------------------

op := shiftOp=shiftOp | regImmOp=regImmOp
regImmOp := regOp=regOp | immOp=immOp
shiftOp := opToShift=regImmOp wso ',' wso shiftType=shiftType wso opShift=regImmOp
addressingMode := '\[' wso reg=regOp wso '\]' offset=offset? | '\[' wso reg=regOp offset=offset? wso '\]' increment='!'?

offset := wso ',' wso sign=sign offset=op

regOp := regOp='[rR][0-9]+' | '[pP][cC]' | '[lL][rR]' | '[sS][pP]'
regOpRange := op1=regOp wso '-' wso op2=regOp
regOpOrRange := op=regOpRange | op=regOp
regOpList := op=regOpOrRange wso ',' wso nextOp=regOpList | op=regOpOrRange

immOp := immType=immType sign=sign base=base number='[0-9a-fA-F]+'
immType := '#' | '='
base := '0[xX]' | '0[bB]' | '0[oO]' | ''
sign := '-' | '\+' | ''

branchOp := '[_A-Za-z][_A-Za-z0-9]*'

shiftType := '[lL][sS][lL]' | '[aA][sS][lL]' | '[lL][sS][rR]' | '[aA][sS][rR]' | '[rR][oO][rR]' | '[rR][rR][xX]'

condition := condType=conditionType updateStatusReg='[sS]'?
conditionType := '[eE][qQ]' | '[nN][eE]' | '[hH][sS]' | '[cC][sS]' | '[lL][oO]' | '[cC][cC]' | '[mM][iI]' | '[pP][lL]' | '[vV][sS]' |
                 '[vV][cC]' | '[hH][iI]' | '[lL][sS]' | '[gG][eE]' | '[lL][tT]' | '[gG][tT]' | '[lL][eE]' | '[aA][lL]' | '[nN][vV]' | ''

//------------------------------------------------------------------------------------------------

ws := '[ \t]+'
wso := '[ \t]*'
nend := '\n' | $